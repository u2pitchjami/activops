# activops/db/types.py
from __future__ import annotations

from collections.abc import Iterable
from types import TracebackType
from typing import Any, Protocol, runtime_checkable


@runtime_checkable
class CursorProtocol(Protocol):
    # Attribut DB-API
    rowcount: int

    def execute(self, query: str, params: Iterable[Any] | None = ...) -> Any: ...
    def executemany(self, query: str, seq_of_params: Iterable[Iterable[Any]]) -> Any: ...
    def fetchone(self) -> Any: ...
    def fetchall(self) -> Any: ...
    def close(self) -> None: ...
    def __enter__(self) -> CursorProtocol: ...
    def __exit__(
        self,
        exc_type: type[BaseException] | None,
        exc: BaseException | None,
        tb: TracebackType | None,
    ) -> bool: ...


@runtime_checkable
class ConnectionProtocol(Protocol):
    def cursor(self, *args: Any, **kwargs: Any) -> CursorProtocol: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def close(self) -> None: ...
